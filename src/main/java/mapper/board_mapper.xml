<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="board.batisdao.BoardDAO">
	<!-- namespace 겹치지 않은 이름으로 지정 세미콜론 넣으면 안된다 프리페어객체로 들어간다 태그를 생성하면 id를 생성한다 
		아이디 중복이 있으면 안된다 구분하기 위해 특정 id값을 부여가 핋요하다 board.dao.BoardDAO.insert 로 호출한다 
		#{} sql 값을 바인딩 한다 자바에서 ?와 같은 기능
		nampspace+id -->
		
		<!-- 조회기능 생성해보자 SELECT 태그를 사용한다
			db에서 사용하는 select 코드를 입력하장
			레코드 값을 전달하자 resultType 을 쓰자 문서보고 작성하자
			쓸 때는 타입의 형태로 쓴다
			VO 타입의 객체를 넘겨준다
			쿼리를 DAO는 한출밖에 안들어가니깐 편리하다
			엄청난 장점이다 메소드를 하나 호출하는걸로 끝난다
			쿼리에 필요한 기능을 xml로 정리해놓고 호출해서 개편하다
			쿼리는 쿼리대로 따로 작성하도 while 문으로 다시 가져와
			
			
		-->
		<select id = "selectAll" resultType = "boardVO">
		  select post_id, title, writer_id as writerId, content, location, pay, work_time as workTime, 
		  to_char(reg_date, 'yyyy-mm-dd') as regDate, to_char(deadline, 'yyyy-mm-dd') as deadline
			from tbl_job_post
		   order by post_id desc
		</select>
		
	<insert id="insert" parameterType="boardVO">
		insert into tbl_job_post (
		post_id, title, writer_id, content, location, pay,
		work_time, reg_date, deadline
		) values (
		seq_job_post.NEXTVAL,
		#{title},
		#{writerId},
		#{content},
		#{location},
		#{pay},
		#{workTime},
		TO_DATE(#{regDate}, 'YYYY-MM-DD'),
		TO_DATE(#{deadline}, 'YYYY-MM-DD')
		)
	</insert>

</mapper>