<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="board.batisdao.BoardDAO">
	<!-- namespace 겹치지 않은 이름으로 지정 세미콜론 넣으면 안된다 프리페어객체로 들어간다 태그를 생성하면 id를 생성한다 
		아이디 중복이 있으면 안된다 구분하기 위해 특정 id값을 부여가 핋요하다 board.dao.BoardDAO.insert 로 호출한다 
		#{} sql 값을 바인딩 한다 자바에서 ?와 같은 기능 nampspace+id -->

	<!-- 조회기능 생성해보자 SELECT 태그를 사용한다 db에서 사용하는 select 코드를 입력하장 레코드 값을 전달하자 resultType 
		을 쓰자 문서보고 작성하자 쓸 때는 타입의 형태로 쓴다 VO 타입의 객체를 넘겨준다 쿼리를 DAO는 한출밖에 안들어가니깐 편리하다 
		엄청난 장점이다 메소드를 하나 호출하는걸로 끝난다 쿼리에 필요한 기능을 xml로 정리해놓고 호출해서 개편하다 쿼리는 쿼리대로 따로 
		작성하도 while 문으로 다시 가져와 -->
	<!-- 리턴값이 있으면 resultType으로 가져온다 파라미터 타입을 생각하고 해당 자료형을 적어준다 -->

	<select id="selectWhere" resultMap="boardMap" parameterType="boardVO">
		<!-- where절로 특정 조건 검색하기 타이틀명과 작성자 검색해보기 -->
		select post_id , title, writer_id as writerId,
		content, location, pay,
		work_time as workTime,
		to_char(reg_date, 'yyyy-mm-dd') as regDate,
		to_char(deadline, 'yyyy-mm-dd') as deadline
		from tbl_project_post
		where
		title = #{title} and writer_id = #{writerId}

	</select>

	<select id="selectByNo" resultType="boardVO" parameterType="int">
		select post_id , title, writer_id as writerId,
		content, location, pay,
		work_time as workTime,
		to_char(reg_date, 'yyyy-mm-dd') as regDate,
		to_char(deadline, 'yyyy-mm-dd') as deadline
		from tbl_project_post
		where
		post_id = #{post_id}
		<!-- 이미어차피 값은 하나만 들어가니깐 이름 아무거나 해도 알아서 매핑이 된다 -->
	</select>

	<select id="selectByNo2" resultMap="boardMap"
		parameterType="int">
		select post_id , title, writer_id writer_id,
		content, location, pay,
		work_time as workTime,
		to_char(reg_date, 'yyyy-mm-dd') reg_date,
<<<<<<< HEAD
		to_char(deadline, 'yyyy-mm-dd') as deadline
=======
		to_char(deadline, 'yyyy-mm-dd') as deadline,
		image
>>>>>>> d560f20a6a385c7c6dd6056c4e4d0dc377271aea
		from tbl_project_post
		where
		post_id = #{post_id}
		<!-- 이미어차피 값은 하나만 들어가니깐 이름 아무거나 해도 알아서 매핑이 된다 -->
	</select>


	<delete id="deleteById" parameterType="int">
		delete from
		tbl_project_post
		where
		post_id = #{post_id}
	</delete>

	<select id="selectAll" resultType="boardVO">
		select post_id, title,
		writer_id as writerId, content, location, pay,
		work_time as workTime,
		to_char(reg_date, 'yyyy-mm-dd') as regDate, to_char(deadline,
<<<<<<< HEAD
		'yyyy-mm-dd') as deadline
		from tbl_project_post
		order by post_id desc
=======
		'yyyy-mm-dd') as deadline, image
		from tbl_project_post
		order by post_id
		desc
>>>>>>> d560f20a6a385c7c6dd6056c4e4d0dc377271aea
	</select>


	<insert id="insert" parameterType="boardVO">
<<<<<<< HEAD
		insert into tbl_project_post (
=======
		INSERT INTO tbl_project_post (
>>>>>>> d560f20a6a385c7c6dd6056c4e4d0dc377271aea
		post_id, title, writer_id, content, location, pay,
		work_time, reg_date,
		deadline, image
		) VALUES (
		seq_project_post.NEXTVAL,
		#{title},
		#{writerId}, #{content}, #{location}, #{pay},
		#{workTime}, SYSDATE,
		TO_DATE(#{deadline}, 'YYYY-MM-DD'), #{image, jdbcType=BLOB}
		)
	</insert>

	<insert id="insertPostTag" parameterType="map">
		INSERT INTO tbl_post_tag (post_id, tag_id)
		VALUES (#{postId}, #{tagId})
	</insert>


	<!-- resultMap type: 이 멤버변수와 매핑할거여 어떤 타입을 매핑할지에 대해 적자 result column = reg_date(컬럴명) 
		property="getter/setter" -->
	<resultMap type="boardVO" id="boardMap">
		<result column="reg_date" property="regDate" />
		<result column="writer_id" property="writerId" />
	</resultMap>
</mapper>